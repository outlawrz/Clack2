import java.io.*;
import java.util.Scanner;

public class ClackClient
{
    private String userName;
    private String hostName;
    private int port;
    private boolean closeConnection;
    private ClackData dataToSendToServer;
    private ClackData dataToReceiveFromServer;
    private Scanner inFromStd;

    private final static String CONSTANT_KEY= "RAMP";


    public ClackClient(String userName, String hostName, int port)//initializes a new Client in clack
    {
        this.userName=userName;
        this.hostName=hostName;
        this.port=port;
        this.closeConnection = false;
        this.dataToSendToServer=null;
        this.dataToReceiveFromServer=null;
        if(userName==null){
            throw new IllegalArgumentException("Invalid Argument for user name");
        }
        if(hostName==null){
            throw new IllegalArgumentException("Invalid Argument for host name");
        }
        if(port<1024)
        {
            throw new IllegalArgumentException("Port number is not large enough");
        }
    }
    public ClackClient(String userName,String hostName)
    {
        this(userName, hostName, 7000);
    }
    public ClackClient(String userName)
    {
        this(userName,"localhost",7000);
    }
    public ClackClient()
    {
        this("Anon","localhost",7000);
    } // uses first constructor to create default constructor

    public void start()
    {
        InputStreamReader inputStream = new InputStreamReader(System.in);
        Scanner inFromStd = new Scanner(inputStream);
        while(!closeConnection) {
            readClientData();
            dataToReceiveFromServer = dataToSendToServer;
            printData(dataToReceiveFromServer);
        }
    }
    public void readClientData()
    {
        try {
            String input=inFromStd.next();
            if (input == "DONE") {
                this.closeConnection = true;
            }
            else-if(input.substring(0,8) == "SENDFILE"){
                String filename= inFromStd.next();
                dataToSendToServer= new FileClackData(this.userName,filename, dataToSendToServer.CONSTANT_SENDFILE);
            }
            else-if (input == "LISTUSERS"){
                System.out.println("Unable to perform at this time");
            }
            else
            {
                while (inFromStd.hasNext()){
                    input= input + inFromStd.next();
                }
              dataToSendToServer = new MessageClackData(this.userName,input, dataToSendToServer.CONSTANT_SENDMESSAGE);
            }
        }catch(IOException ioe){
            System.err.println("IO Exception occured");
        }catch(FileNotFoundException fnfe){
            dataToSendToServer=null;
            System.err.println("File could not be found");
        }
    }

    public void sendData(ClackData dataToSendToServer)
    {

    }

    public void recieveData(ClackData dataToReceiveFromServer)
    {

    }
    public void printData(ClackData dataToReceiveFromServer)
    {
        System.out.println("Username: " +dataToReceiveFromServer.getUserName()+ "Type: "+ dataToReceiveFromServer.type+dataToReceiveFromServer.getDate());
    }
    public String getUserName()
    {
        return this.userName;
    }

    public String getHostName()
    {
        return this.hostName;
    }
     public int getPort()
     {
         return this.port;
     }

     public String hashcode() // uses length of username and length of hostname to get hash value
     {
         String hash="";
         for (int i=0; (i<userName.length()&&i<10);i++)
         {
             for (int k=0;(k<hostName.length()&&k<10);k++)
             {
                 if (i%2==0)
                 {
                     hash= hash + userName.charAt(i);
                 }
                 if (k%2==1)
                 {
                     hash = hash + hostName.charAt(k);
                 }
             }
         }
         return hash;
     }

     public boolean equals(ClackClient client)//checks if two client objects are equal
     {
        return ((client.userName == this.userName)&&(client.hostName==this.hostName)&&(client.port==this.port));
     }

     public String toString() //Returns all information about client as string
     {
         return "User Name: " + this.getUserName()+" Host Name: "+ this.getHostName()+" Port: "+ this.getPort()+" Connected: " + this.closeConnection + " Sent to Server: "+ this.dataToSendToServer + " Received from Server: "+this.dataToReceiveFromServer;
     }
}
